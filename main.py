# -*- coding: utf-8 -*-
"""python_practice_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YG16uIJH60P6nR1DFSeFngGQWIapwF4s

# I. Змінні та памʼять.

1. Створити змінні, що посилаються на два цілих числа, що однакові за значенням, де значення належить проміжку від -5 до 256. Чи будуть ці змінні рівні тільки за значенням або ж ще будуть посилатися на один і той самий обʼєкт в памʼяті? Наведіть код та дайте текстову відповідь нижче.
"""

a = 42
b = 42

print(a is b)  # Виведе True

"""2. Створити змінні, що посилаються на одне і те саме булеве значення. Чи будуть ці змінні рівні тільки за значенням або ж ще будуть посилатися на один і той самий обʼєкт в памʼяті? Наведіть код та дайте текстову відповідь нижче."""

a = True
b = True

print(a is b)  # Виведе True

"""У цьому випадку a і b будуть посилатися на один і той самий об'єкт в пам'яті, оскільки обидва містять стандартне булеве значення True.

3. За допомогою якої функції можна перевірити належність змінної до вказаного типу даних (напр. чи змінна посилається на значення булевого типу)?
"""

x = True

if isinstance(x, bool):
    print("x є булевим типом")
else:
    print("x не є булевим типом")

"""# II. Цілі числа та числа з рухомою комою

4. Створити дві змінні, що посилаються на будь-які два цілих числа та продемонструвати такі арифметичні операції: додавання, віднімання, ділення, множення, ділення без залишку, ділення по модулю, приведення до ступеню. Всі результати операцій вивести на екран.
"""

# Створення змінних
a = 10
b = 3

# Додавання
print(f'{a} + {b} = {a + b}')

# Віднімання
print(f'{a} - {b} = {a - b}')

# Ділення
print(f'{a} / {b} = {a / b}')

# Множення
print(f'{a} * {b} = {a * b}')

# Ділення без залишку
print(f'{a} // {b} = {a // b}')

# Ділення по модулю
print(f'{a} % {b} = {a % b}')

# Піднесення до ступеня
print(f'{a} ** {b} = {a ** b}')

"""5. Створити дві змінні, що посилаються на будь-які два числа з рухомою комою та продемонструвати такі арифметичні операції: додавання, віднімання, ділення, множення, ділення без залишку, ділення по модулю, приведення до ступеню. Всі результати операцій вивести на екран."""

# Створення змінних
x = 7.5
y = 2.0

# Додавання
print(f'{x} + {y} = {x + y}')

# Віднімання
print(f'{x} - {y} = {x - y}')

# Ділення
print(f'{x} / {y} = {x / y}')

# Множення
print(f'{x} * {y} = {x * y}')

# Ділення без залишку
print(f'{x} // {y} = {x // y}')

# Ділення по модулю
print(f'{x} % {y} = {x % y}')

# Приведення до ступеня
print(f'{x} ** {y} = {x ** y}')

"""6. Спробуйте проробити всі ті самі арифметичні операції над двома змінними, що посилаються на різні булеві значення. Прокоментуйте, чому, на Вашу думку, Ви отримали саме такі результати."""

# Створення змінних
p = True
q = False

# Додавання
print(f'{p} + {q} = {p + q}')

# Віднімання
print(f'{p} - {q} = {p - q}')

# Множення
print(f'{p} * {q} = {p * q}')

# Ділення
print(f'{p} / {q} = {p / q}')

# Ділення без залишку
print(f'{p} // {q} = {p // q}')

# Ділення по модулю
print(f'{p} % {q} = {p % q}')

# Приведення до ступеня
print(f'{p} ** {q} = {p ** q}')

"""Зазвичай булеві значення використовуються для логічних операцій, а не для арифметичних.

7. Використовуючи змінні з вправи 3, продемонструйте механізм явного перетворення типів, де числа з рухомою комою перетворюються на цілі числа.
"""

# Створення змінних з числами з рухомою комою
x = 7.5
y = 2.8

# Явне перетворення на цілі числа
x_as_int = int(x)
y_as_int = int(y)

# Виведення результатів
print(f'До перетворення: x = {x}, y = {y}')
print(f'Після перетворення: x_as_int = {x_as_int}, y_as_int = {y_as_int}')

"""# III. Робота зі списками.

8. Створити список двома різними за синтаксисом способами. За допомогою вбудованої функції обчисліть довжину одного з них.
"""

# Створення списку способом 1
list1 = [1, 2, 3, 4, 5]

# Створення списку способом 2
list2 = list(range(10, 20, 2))

# Виведення списків
print("Список 1:", list1)
print("Список 2:", list2)

# Обчислення довжини списку
length_of_list1 = len(list1)
length_of_list2 = len(list2)

# Виведення довжини списку
print("Довжина списку 1:", length_of_list1)
print("Довжина списку 2:", length_of_list2)

"""9. Створіть два списка та за допомогою спеціального методу додайте другий з них в якості останнього елемента першого."""

# Створення двох списків
list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]

# Додавання другого списку в якості останнього елемента першого
list1.extend([list2])

# Виведення результату
print("Список 1 після додавання списку 2:", list1)

"""10. Створіть два списка та за допомогою спеціального методу "розширте" перший (додайте всі елементи другого в кінець першого списку). Напишіть, чим відрізняються методи в завданні 9 та 10."""

# Створення двох списків
list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]

# Розширення першого списку елементами другого
list1.extend(list2)

# Виведення результату
print("Список 1 після розширення списком 2:", list1)

"""*місце для відповіді*

11. Створіть список та відсортуйте його так, щоб:
а) його id залишився незмінним після сортування.
б) результат сортування був збережений у нову змінну. Підказка: для одного пункту використовуйте вбудовану функцію стортування, а в іншому - спеціальний метод для роботи зі списками.
"""

# a
# Створення списку
original_list = [3, 1, 4, 1, 5, 9, 2, 6, 5]

# Сортування списку, збереження результату у нову змінну
sorted_list_a = sorted(original_list, key=id)

# Виведення результатів
print("Початковий список:", original_list)
print("Відсортований список (за збереженням id):", sorted_list_a)

# b
# Створення списку
original_list = [3, 1, 4, 1, 5, 9, 2, 6, 5]

# Копіювання списку
list_copy = original_list.copy()

# Сортування списку за допомогою методу sort()
list_copy.sort()

# Виведення результатів
print("Початковий список:", original_list)
print("Відсортований список (збереження результату у нову змінну):", list_copy)

"""12. Створіть список з елементами різного типу, де деякі значення елементів повторюються. За допомогою спеціального методу порахуйте кількість значень одного з елементів на Ваш вибір. Результат виведіть на екран."""

# Створення списку
mixed_list = [1, 'apple', 2.5, 'orange', 1, 'apple', True, False, 'apple']

# Підрахунок кількості значень 'apple' у списку
count_of_apple = mixed_list.count('apple')

# Виведення результату
print("Список:", mixed_list)
print("Кількість значень 'apple' у списку:", count_of_apple)

"""# IV. Робота з кортежами.

13. Створити список з один типом елементів та на основі цього списку створити кортеж.
"""

# Створення списку
my_list = [1, 2, 3, 4, 5]

# Створення кортежу на основі списку
my_tuple = tuple(my_list)

# Виведення результату
print("Список:", my_list)
print("Кортеж:", my_tuple)

"""14. Створити кортеж з один елементом."""

# Створення кортежу з одним елементом
my_singleton_tuple = (42,)

# Виведення результату
print("Кортеж з одним елементом:", my_singleton_tuple)

"""15. Створити кортеж. Вивести на екран всі доступні його атрибути та методи."""

# Створення кортежу
my_tuple = (1, 2, 3, 4, 5)

# Виведення атрибутів та методів кортежу
print("Атрибути та методи кортежу:")
print("===================================")
print("Атрибут __class__:", my_tuple.__class__)
print("Метод count():", my_tuple.count(3))
print("Метод index():", my_tuple.index(4))

"""16. Порівняйте список та кортеж. Назвіть схожості та відмінності, випадки використання.

Схожості між списками та кортежами:

Можливість зберігати колекції елементів: Обидва типи даних призначені для зберігання колекцій елементів в одній змінній.

Ітерабельність: Як списки, так і кортежі є ітерабельними, що означає, що ви можете перебирати їх елементи за допомогою циклів.

Індексація та зрізи: Обидва дозволяють отримати доступ до елементів за їхніми індексами та використовувати зрізи для отримання підмножини елементів.

Відмінності між списками та кортежами:

Змінність: Списки є змінними, тобто їх можна модифікувати після створення (додавати, видаляти, змінювати елементи). Кортежі є незмінними, і їхні елементи не можна змінювати після створення.

Синтаксис: Списки створюються за допомогою квадратних дужок ([]), а кортежі - за допомогою круглих дужок (()).

Швидкість: У багатьох випадках кортежі можуть бути трошки ефективнішими щодо швидкості в порівнянні із списками, особливо при ітерації над ними.
Випадки використання:

Списки використовуються, коли:

Потрібна можливість динамічно додавати, видаляти та змінювати елементи.
Потрібна змінність та гнучкість в роботі з даними.
Потрібно представлення послідовності елементів у вигляді, зручному для змін.
Кортежі використовуються, коли:

Дані є незмінними та не повинні змінюватися після створення.
Потрібно швидше представлення даних, яке не вимагає багато операторів та пам'яті.
Для представлення фіксованих послідовностей даних, наприклад, координат точок, розмірів, інформації про дату і час тощо.
Обирайте між списками та кортежами в залежності від конкретних вимог вашого проекту та від того, чи потрібна вам можливість змінювати дані після створення.

# V. Індексування та слайсинг.

17. Створіть список з 6ти елементів. Отримайте третій елемент за допомогою двох різних індексів.
"""

# Створення списку
my_list = [10, 20, 30, 40, 50, 60]

# Отримання третього елемента за допомогою індексу 2
element_at_index_2 = my_list[2]

# Отримання третього елемента за допомогою індексу 3
element_at_index_3 = my_list[3]

# Виведення результатів
print("Список:", my_list)
print("Третій елемент за допомогою індексу 2:", element_at_index_2)
print("Третій елемент за допомогою індексу 3:", element_at_index_3)

"""18. Створіть список, де елементами цього списку також є списки. Отримай перший елемент з останнього рядка та виведи значення на екран."""

# Створення списку, де елементами є списки
nested_list = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

# Отримання першого елемента з останнього рядка
first_element_last_row = nested_list[-1][0]

# Виведення результату
print("Список:", nested_list)
print("Перший елемент з останнього рядка:", first_element_last_row)

"""19. Створіть кортеж, що містить 8  елементів цілочисленного типу. Виведіть на екран три найменших значення."""

# Створення кортежу з 8 цілочисельних елементів
my_tuple = (15, 8, 3, 12, 6, 10, 5, 7)

# Виведення три найменших значень
print("Кортеж:", my_tuple)
print("Три найменших значення:", sorted(my_tuple)[:3])

"""20. Створіть список з десяти елементів різного типу. Отримайте всі елементи, окрім двох перших та двох останніх та збережіть їх в новій змінній."""

# Створення списку з 10 елементів різного типу
my_list = [1, 'hello', 3.14, True, [5, 6], 'world', 7, 8, (9, 10), 'python']

# Отримання всіх елементів, окрім двох перших та двох останніх
new_list = my_list[2:-2]

# Виведення результатів
print("Список:", my_list)
print("Новий список:", new_list)

"""21. Створіть кортеж з 11ти елементів чисел з рухомою комою та отримайте кожен парний за індексом елемент в зворотньому порядку. Наприклад, маючи (1.2, 2.3, 3.3, 4.3, 5.3, 6.3, 7.3, 8.3, 9.3, 0.3), отримати (0.3, 8.3, 6.3, 4.3, 2.3). Результат збережіть в нову змінну та виведіть на екран."""

# Створення кортежу з 11 елементів чисел з рухомою комою
my_tuple = (1.2, 2.3, 3.3, 4.3, 5.3, 6.3, 7.3, 8.3, 9.3, 0.3, 11.3)

# Отримання кожного парного за індексом елемента в зворотньому порядку
result_tuple = my_tuple[-1::-2]

# Виведення результату
print("Кортеж:", my_tuple)
print("Результат:", result_tuple)

"""# Вітаю! Ви велика(ий) молодець, що впоралась(вся). Похваліть себе та побалуйте чимось приємним. Я Вами пишаюся."""